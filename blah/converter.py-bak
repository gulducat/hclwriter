import logging
logger = logging.getLogger(__name__)


def convert(data):
    blocks = {}
    for b, vals in data.items():
        name = list(vals.keys())[0]
        # blocks[b] = '%s "%s" {' % (b, name)
        blocks[b] = b
        for x in name.split('.'):
            blocks[b] += ' "%s"' % x
        blocks[b] += ' {'
        blocks[b] += recurse(vals[name])
        blocks[b] += '\n}\n'
    return '\n'.join(blocks.values())


def recurse(val, level=1):
    # logger.warning(f"recurse-ing {val}") s
    content = ''
    indent = ' ' * level * 2
    for k, v in val.items():
        if isinstance(v, list):
            content += '\n%s%s = [' % (indent, k)
            for x in v:
                content += '\n%s%s,' % (indent * 2, format(x))
            content += '\n%s]' % indent
        elif isinstance(v, dict):
            content += '\n%s%s = {' % (indent, k)
            content += recurse(v, level=level + 1)
            content += '\n%s}' % indent
        else:
            content += '\n%s%s = %s' % (indent, k, format(v))
    return content


def format(val):
    if isinstance(val, str):
        return '"%s"' % val
    elif isinstance(val, bool):
        return 'true' if val else 'false'
    return val
